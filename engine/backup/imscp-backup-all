#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2014 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# @category		i-MSCP
# @copyright	2010-2014 by i-MSCP | http://i-mscp.net
# @author		Daniel Andreca <sci2tech@gmail.com>
# @author		Laurent Declercq <l.declercq@nuxwin.com>
# @link			http://i-mscp.net i-MSCP Home Site
# @license		http://www.gnu.org/licenses/gpl-2.0.html GPL v2

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/..", "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";

use iMSCP::Debug;
use iMSCP::Boot;
use iMSCP::Execute;
use iMSCP::Dir;
use iMSCP::Ext2Attributes qw( setImmutable clearImmutable );
use POSIX qw(strftime);

# Turn off localisation features to force any command output to be in english
$ENV{'LC_MESSAGES'} = 'C';

# Do not clear screen at end of script
$ENV{'IMSCP_CLEAR_SCREEN'} = 0;

umask(027);

newDebug('imscp-backup-all.log');

# Entering in silent mode
silent(1);

our $command = {
	'pbzip2' => { 'extension' => 'bz2', 'command' => 'CMD_PBZIP' },
	'bzip2' => { 'extension' => 'bz2', 'command' => 'CMD_BZIP' },
	'gzip' => { 'extension' => 'gz', 'command' => 'CMD_GZIP' },
	'lzma' => { 'extension' => 'lzma', 'command' => 'CMD_LZMA' },
	'xz' => { 'extension' => 'xz', 'command' => 'CMD_XZ' }
};

sub startUp
{
	iMSCP::Boot->getInstance()->boot({ 'nolock' => 'yes', 'config_readonly' => 'yes' });

	0;
}

sub process
{
	return 0 if $main::imscpConfig{'BACKUP_DOMAINS'} ne 'yes';

	unless ($main::imscpConfig{'ZIP'} =~ /^(pbzip2|bzip2|gzip|lzma|xz)$/i) {
		error("Backup algorithm not supported: $main::imscpConfig{'ZIP'}");
		return 1;
	}

	my $rs = 0;
	my ($ret, $rdata, $stdout, $stderr);
	my $database = iMSCP::Database->new()->factory();
	my $canDumpDatabases = $database->can('dumpdb');
	my $cmdTar = $main::imscpConfig{'CMD_TAR'};
	my $algorithm = lc($main::imscpConfig{'ZIP'});

	my $sql = "
		SELECT
			`domain_id`, `domain_name`, `domain_admin_id`, `allowbackup`
		FROM
			`domain`
		WHERE
			`domain_status` = ?
		AND
			`allowbackup` <> ?
	";
	$rdata = $database->doQuery('domain_name', $sql, 'ok', 'no');

	unless (ref $rdata eq 'HASH') {
		error($rdata);
		$rs = 1;
	} else {
		for (keys %$rdata) {
			$ret = 0;

			# TODO ticket: #747
			#Â Usage of global lock here is an error. Depending on the size of data to backup, a process can take a
			# while and along this time, any backend task will be blocked. It could be better to lock only the domain
			# for which the script acts
			iMSCP::Boot->getInstance()->lock();

			if ($rdata->{$_}->{'allowbackup'} ne 'no') {
				my $homeDir = "$main::imscpConfig{'USER_WEB_DIR'}/$rdata->{$_}->{'domain_name'}";
				my $bkpDir = "$homeDir/backups";
				my $userName =
				my $groupName = $main::imscpConfig{'SYSTEM_USER_PREFIX'} .
					($main::imscpConfig{'SYSTEM_USER_MIN_UID'} + $rdata->{$_}->{'domain_admin_id'});

				if(! -d $homeDir) { # Skip backup if home directory doesn't exist
					warning("Home directory $homeDir doesn't exist. Skipping backup...");
					iMSCP::Boot->getInstance()->unlock();
					next
				} elsif(! -d $bkpDir) { # Create backups directory if doesn't already exists
					# Unprotect customer home directory to be able to write in it
					clearImmutable($homeDir);

					$ret = iMSCP::Dir->new('dirname' => $bkpDir)->make(
						{ 'user' => $userName, 'group' => $groupName, 'mode' => 0750 }
					);

					# Protect home directory
					setImmutable($homeDir);

					if($ret) {
						$rs |= $ret;
						goto NEXT;
					}
				}

				# Remove any previous backup file
				$rs |= execute("$main::imscpConfig{'CMD_RM'} -fR $bkpDir/*", \$stdout, \$stderr);
				debug($stdout) if $stdout;
				error($stderr) if $stderr && $rs;

				my $ext = $command->{$algorithm}->{'extension'};
				my $date = strftime "%Y.%m.%d-%H-%M", localtime;

				if ($rdata->{$_}->{'allowbackup'} =~ /^full|dmn$/) {
					my @cmd = (
						$cmdTar,
						"--create",										# Create new archive
						"--directory=$homeDir",							# Change to directory
						'--use-compress-program=' . lc($algorithm),		# Compress archive with given program
						"--file=$bkpDir/$_-backup-$date.tar.$ext",		# use archive file
						'--exclude=logs',								# exclude logs directory from archive
						'--exclude=phptmp',								# exclude phptmp directory from archive
						'--exclude=backups',							# exclude backup from archive/-
						'--exclude=domain_disable_page',				# exclude domain_disable_page from archive/-
						'.'												# pathname
					);

					my $trs = execute("@cmd", \$stdout, \$stderr);
					debug($stdout) if $stdout;
					# Tar exit with status 1 only if some files were changed while being read. We want ignore this.
					if($trs > 1) {
						error($stderr) if $stderr;
						error("Unable to backup $homeDir") if ! $stderr;
						$rs |= $trs;
					}

					my $file = iMSCP::File->new('filename' => "$bkpDir/$_-backup-$date.tar.$ext");
					$rs |= $file->mode(0644);
					$rs |= $file->owner($userName, $groupName);
				}

				# Backup all customer databases
				if ($canDumpDatabases && $rdata->{$_}->{'allowbackup'} =~ /^full|sql$/) {
					my $dbData = $database->doQuery(
						'sqld_name',
						"SELECT `sqld_id`, `sqld_name` FROM `sql_database` WHERE `domain_id` = ?",
						$rdata->{$_}->{'domain_id'}
					);
					unless (ref $dbData eq 'HASH') {
						error($dbData);
						$rs |= 1;
						goto NEXT;
					}

					for (keys %$dbData) {
						$ret = iMSCP::Database->new()->factory()->dumpdb($_, "$bkpDir/$_.sql");

						if($ret) {
							$rs |= $ret;
							goto NEXT;
						}

						my $file = iMSCP::File->new(filename => "$bkpDir/$_.sql");
						$rs |= $file->mode(0644);
						$rs |= $file->owner($userName, $groupName);

						my $cmd = $main::imscpConfig{$command->{$algorithm}->{'command'}} . ' --force ' .
							escapeShell("$bkpDir/$_.sql");

						$rs = execute($cmd, \$stdout, \$stderr);
						debug($stdout) if $stdout;
						error($stderr) if $stderr && $rs;
						error("Unable to dump the $_ database") if $rs && ! $stderr;
					}
				}
			}

			NEXT:
			iMSCP::Boot->getInstance()->unlock();
		}
	}

	$rs;
}

sub shutDown
{
	my @errorMessages = (getMessageByType('warn'), getMessageByType('error'));

	if(@errorMessages) {
		require iMSCP::Mail;
		iMSCP::Mail->new()->errmsg("@errorMessages");
	}
}

# Main program

my $rs = startUp();
$rs ||= process();

shutDown();

exit $rs;
