#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2014 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# @category		i-MSCP
# @copyright	2010-2014 by i-MSCP | http://i-mscp.net
# @author		Daniel Andreca <sci2tech@gmail.com>
# @author		Laurent Declercq <l.declercq@nuxwin.com>
# @link			http://i-mscp.net i-MSCP Home Site
# @license		http://www.gnu.org/licenses/gpl-2.0.html GPL v2

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/..", "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";

use POSIX;
use iMSCP::Debug;
use iMSCP::Boot;
use iMSCP::Execute;
use iMSCP::File;
use iMSCP::Dir;
use iMSCP::Dialog;

# Turn off localisation features to force any command output to be in english
$ENV{'LC_MESSAGES'} = 'C';

# Do not clear screen at end of script
$ENV{'IMSCP_CLEAR_SCREEN'} = 0;

# Mode in which the script is triggered
# For now, this variable is only used by i-MSCP installer/setup scripts
$main::execmode = shift || '';

umask(027);

newDebug('imscp-backup-imscp.log');

silent(1);

our $command = {
	'pbzip2' => { 'extension' => 'bz2', 'command' => 'CMD_PBZIP'},
	'bzip2' => { 'extension' => 'bz2', 'command' => 'CMD_BZIP'},
	'gzip' => { 'extension' => 'gz', 'command' => 'CMD_GZIP'},
	'lzma' => { 'extension' => 'lzma', 'command' => 'CMD_LZMA'}
};

# Public functions

sub startUp
{

	iMSCP::Boot->getInstance()->boot(
		{ 'nofail' => 'yes', 'nolock' => 'yes', 'config_readonly' => 'yes' }
	)->lock('/tmp/imscp-backup-imscp.lock');

	my $rs = 0;

	unless($main::execmode eq 'setup') {
		require iMSCP::HooksManager;
		$rs = iMSCP::HooksManager->getInstance()->register(
			'beforeExit', sub { shift; my $clearScreen = shift; $$clearScreen = 0; 0; }
		)
	}

	$rs;
}

sub process
{
	return 0 if $main::imscpConfig{'BACKUP_IMSCP'} ne 'yes';

	unless(
		exists $command->{$main::imscpConfig{'ZIP'}} && exists $command->{$main::imscpConfig{'ZIP'}}->{'extension'} &&
		exists $command->{$main::imscpConfig{'ZIP'}}->{'command'}
	) {
		error("Backup algorithm not supported: $main::imscpConfig{'ZIP'}");
		return 1;
	}

	# Ensuring that backup directory exists
	my $rs = iMSCP::Dir->new('dirname' => $main::imscpConfig{'BACKUP_FILE_DIR'})->make(
		{ 'user' => $main::imscpConfig{'ROOT_USER'}, 'group' => $main::imscpConfig{'ROOT_GROUP'}, 'mode' => 0750 }
	);
	return $rs if $rs;

	# Backup i-MSCP database
	$rs = _backupDatabase();
	return $rs if $rs;

	# Backup configuration files
	$rs = _backupConfig();
	return $rs if $rs;

	# Remove any backup older than 7 days
	my ($stdout, $stderr);
	$rs = execute(
		"/usr/bin/find $main::imscpConfig{'BACKUP_FILE_DIR'}/* -maxdepth 0 -type f -mtime +7 -print | xargs -r /bin/rm -v",
		\$stdout, \$stderr
	);
	debug($stdout) if $stdout;
	error($stderr) if $stderr && $rs;
	error('Unable to remove old i-MSCP backups') if $rs && ! $stderr;
	return $rs if $rs;

	0;
}

sub shutDown
{
	my @errorMessages = (getMessageByType('warn'), getMessageByType('error'));

	if(@errorMessages) {
		require iMSCP::Mail;
		iMSCP::Mail->new()->errmsg("@errorMessages");
	}
}

# Private functions

sub _backupDatabase
{
	my $database = iMSCP::Database->new('db' => $main::imscpConfig{'DATABASE_TYPE'})->factory();

	# TODO check if database exists

	if($database->can('dumpdb')) {
		my $date = strftime "%Y.%m.%d-%H-%M", localtime;
		my $sqlFName = "$main::imscpConfig{'BACKUP_FILE_DIR'}/$main::imscpConfig{'DATABASE_NAME'}-$date.sql";

		my $rs = $database->dumpdb($main::imscpConfig{'DATABASE_NAME'}, $sqlFName);
		error("Unable to dump the $main::imscpConfig{'DATABASE_NAME'} database") if $rs;
		return $rs if $rs;

		my $file = iMSCP::File->new('filename' => $sqlFName);

		$rs = $file->owner($main::imscpConfig{'ROOT_USER'}, $main::imscpConfig{'ROOT_GROUP'});
		return $rs if $rs;

		my $zip = lc($main::imscpConfig{'ZIP'});
		my $compressCmd = "$main::imscpConfig{$command->{$zip}->{'command'}} --force " . escapeShell($sqlFName);

		my ($stdout, $stderr);
		$rs = execute($compressCmd, \$stdout, \$stderr);
		debug($stdout) if $stdout;
		if($rs > 1) { # Tar exit with status 1 only if some files were changed while being read. We want ignore this.
			error($stderr) if $stderr;
			error("Unable to compress $sqlFName database dump file") if ! $stderr;
			return $rs if $rs;
		}
	}

	0;
}

sub _backupConfig
{
	my $date = strftime "%Y.%m.%d-%H-%M", localtime;
	my $tarName = "$main::imscpConfig{'BACKUP_FILE_DIR'}/config-backup-$date.tar";
	my $fileName = "$tarName.$command->{$main::imscpConfig{'ZIP'}}->{'extension'}";

	my @backupCommand = (
		"$main::imscpConfig{'CMD_TAR'}",
		'--create',															# Create new archive
		"--directory=$main::imscpConfig{'CONF_DIR'}",						# Change to directory
		'--use-compress-program=' . lc($main::imscpConfig{'ZIP'}),			# Compress archive with given program
		'--exclude=?*[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]',	# Exclude backup files
		'--preserve-permissions',											# Preserve permissions
		"--file=$fileName",													# use archive file
		'.'																	# pathname
	);

	my ($rs, $stdout, $stderr);
	$rs = execute("@backupCommand", \$stdout, \$stderr);
	debug($stdout) if $stdout;
	error($stderr) if $stderr && $rs;
	error("Unable to create i-MSCP configuration backup") if $rs && ! $stderr;
	return $rs if $rs;

	my $file = iMSCP::File->new('filename' => $fileName);
	$rs = $file->mode(0640);
	return $rs if $rs;

	$file->owner($main::imscpConfig{'ROOT_USER'}, $main::imscpConfig{'ROOT_GROUP'});
}

# Main program
my $rs = startUp();

$rs ||= process();
shutDown();

exit $rs;
